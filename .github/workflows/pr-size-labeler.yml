name: PR Size Labeler

on:
  pull_request:
    types: [opened, synchronize, reopened]

# Cancel previous runs on new commits
concurrency:
  group: pr-size-labeler-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

# Environment variables for comment markers
env:
  SIZE_COMMENT_MARKER: '📏 PR Size Analysis'

jobs:
  size-label:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          disable-sudo: true
          egress-policy: audit
          allowed-endpoints: >
            api.github.com:443
            github.com:443

      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files and calculate size
        id: changes
        uses: tj-actions/changed-files@v45
        with:
          files_ignore: |
            **.md
            **.txt
            .gitignore
            LICENSE
            docs/**
            package-lock.json
            yarn.lock
            pnpm-lock.yaml

      - name: Calculate PR size and apply label
        uses: actions/github-script@v7
        with:
          script: |
            const filesCount = ${{ steps.changes.outputs.all_changed_files_count }};
            const changedFiles = `${{ steps.changes.outputs.all_changed_files }}`.split(' ');

            // Calculate lines changed (approximate from file count for now)
            // In a more sophisticated setup, you'd parse actual diff
            let sizeLabel = '';
            let sizeColor = '';
            let sizeDescription = '';

            // Define size thresholds based on files changed
            if (filesCount <= 3) {
              sizeLabel = 'size/XS';
              sizeColor = '00ff00';
              sizeDescription = 'Extra Small: 1-3 files changed';
            } else if (filesCount <= 8) {
              sizeLabel = 'size/S';
              sizeColor = '7cfc00';
              sizeDescription = 'Small: 4-8 files changed';
            } else if (filesCount <= 20) {
              sizeLabel = 'size/M';
              sizeColor = 'ffff00';
              sizeDescription = 'Medium: 9-20 files changed';
            } else if (filesCount <= 50) {
              sizeLabel = 'size/L';
              sizeColor = 'ff8c00';
              sizeDescription = 'Large: 21-50 files changed';
            } else {
              sizeLabel = 'size/XL';
              sizeColor = 'ff0000';
              sizeDescription = 'Extra Large: 50+ files changed';
            }

            console.log(`PR size: ${sizeLabel} (${filesCount} files)`);

            // Check existing labels to avoid unnecessary changes
            const existingLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const currentSizeLabels = existingLabels.data.filter(label => label.name.startsWith('size/'));
            const hasCorrectLabel = currentSizeLabels.some(label => label.name === sizeLabel);

            if (hasCorrectLabel && currentSizeLabels.length === 1) {
              console.log(`Correct size label '${sizeLabel}' already applied, skipping update`);
            } else {
              // Remove incorrect size labels
              for (const label of currentSizeLabels) {
                if (label.name !== sizeLabel) {
                  console.log(`Removing incorrect label: ${label.name}`);
                  await github.rest.issues.removeLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    name: label.name
                  });
                }
              }

              // Create the size label if it doesn't exist
              if (!hasCorrectLabel) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: sizeLabel,
                    color: sizeColor,
                    description: sizeDescription
                  });
                } catch (error) {
                  // Label might already exist, that's fine
                  console.log(`Label ${sizeLabel} might already exist: ${error.message}`);
                }

                // Apply the new size label
                console.log(`Adding new size label: ${sizeLabel}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: [sizeLabel]
                });
              }
            }

            // Inline pagination helper
            async function fetchAllComments() {
              let allComments = [];
              let page = 1;

              while (true) {
                const { data } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  per_page: 100,
                  page: page
                });

                allComments = allComments.concat(data);
                if (data.length < 100) break;
                page++;
              }

              return allComments;
            }

            // Centralized comment body builder
            function buildSizeComment(filesCount, sizeLabel) {
              return `## ${{ env.SIZE_COMMENT_MARKER }}

            **Current Size:** \`${sizeLabel}\` (${filesCount} files)

            ${sizeLabel === 'size/XL' ? `
            ### ⚠️ Large PR Considerations:
            - Consider breaking into smaller, focused PRs
            - Review time may be longer
            - Increased risk of merge conflicts

            **If this PR must remain large, ensure it has:**
            - [ ] Clear description of all changes
            - [ ] Comprehensive test coverage
            - [ ] Breaking changes documented
            ` : ''}

            *Last updated: ${new Date().toISOString()}*`;
            }

            // ALWAYS refresh or create comment (runs regardless of label changes)
            try {
              const allComments = await fetchAllComments();
              const existingComment = allComments.find(c =>
                c.body && c.body.includes(process.env.SIZE_COMMENT_MARKER)
              );

              const commentBody = buildSizeComment(filesCount, sizeLabel);

              if (existingComment) {
                // Update existing comment with fresh data
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
                console.log('Updated existing size comment with fresh data');
              } else if (sizeLabel === 'size/XL' || sizeLabel === 'size/L') {
                // Create new comment for L/XL sizes
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
                console.log('Created new size comment');
              }
            } catch (error) {
              console.log('Error handling size comment:', error.message);
            }

            console.log(`Applied label: ${sizeLabel}`);

      - name: Output size information
        run: |
          echo "PR Size Analysis Complete"
          echo "Files changed: ${{ steps.changes.outputs.all_changed_files_count }}"
          echo "This helps Claude choose the appropriate analysis mode automatically."
