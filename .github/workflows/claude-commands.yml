name: Claude Commands

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, edited, assigned]

concurrency:
  group: claude-commands-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read

jobs:
  handle:
    if: |
      (
        github.event_name == 'issue_comment' &&
        contains(github.event.comment.body, '@claude')
      ) || (
        github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, '@claude')
      ) || (
        github.event_name == 'issues' && (
          contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')
        )
      )
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            scripts/workflows/claude/
          sparse-checkout-cone-mode: false

      - name: Classify command
        id: classify
        run: |
          node scripts/workflows/claude/parse-command.mjs > classify.json
          cat classify.json
          should_run=$(jq -r '.shouldRun // false' classify.json)
          command_type=$(jq -r '.command.type // ""' classify.json)
          is_maintainer=$(jq -r '.isMaintainer // false' classify.json)
          issue=$(jq -r '.issue // ""' classify.json)
          is_pr=$(jq -r '.isPR // false' classify.json)
          actor=$(jq -r '.actor // ""' classify.json)
          association=$(jq -r '.association // ""' classify.json)
          echo "should_run=$should_run" >> "$GITHUB_OUTPUT"
          echo "command_type=$command_type" >> "$GITHUB_OUTPUT"
          echo "is_maintainer=$is_maintainer" >> "$GITHUB_OUTPUT"
          echo "issue=$issue" >> "$GITHUB_OUTPUT"
          echo "is_pr=$is_pr" >> "$GITHUB_OUTPUT"
          echo "actor=$actor" >> "$GITHUB_OUTPUT"
          echo "association=$association" >> "$GITHUB_OUTPUT"
        env:
          CLAUDE_TRIGGER_PHRASE: '@claude'

      - name: Skip non-command events
        if: steps.classify.outputs.should_run != 'true'
        run: echo 'No @claude command detected.'

      - name: Skip review commands
        if: steps.classify.outputs.should_run == 'true' && steps.classify.outputs.command_type == 'review'
        run: echo 'Review command detected; handled by review workflow.'

      - name: Enforce maintainer access
        if: steps.classify.outputs.should_run == 'true' && steps.classify.outputs.command_type != 'review'
        run: |
          if [ "${{ steps.classify.outputs.is_maintainer }}" != "true" ]; then
            echo '::notice::Only maintainers may trigger Claude automation.'
            exit 1
          fi

      - name: Full checkout for command execution
        if: steps.classify.outputs.should_run == 'true' && steps.classify.outputs.is_maintainer == 'true' && steps.classify.outputs.command_type != 'review'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch issue context
        if: steps.classify.outputs.should_run == 'true' && steps.classify.outputs.is_maintainer == 'true' && steps.classify.outputs.command_type != 'review'
        id: context
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = '${{ steps.classify.outputs.issue }}';
            if (!issueNumber) {
              core.setOutput('issue_title', '');
              core.setOutput('issue_body', '');
              core.setOutput('comment_body', '');
              return;
            }

            // Fetch issue details
            const { data: issue } = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            // Get the triggering comment
            const commentId = context.payload.comment?.id;
            let commentBody = '';
            if (commentId) {
              const { data: comment } = await github.rest.issues.getComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId
              });
              commentBody = comment.body || '';
            }

            core.setOutput('issue_title', issue.title || '');
            core.setOutput('issue_body', issue.body || '');
            core.setOutput('comment_body', commentBody);
            core.info(`Fetched context for issue #${issueNumber}: ${issue.title}`);

      - name: Claude Command Handler
        if: steps.classify.outputs.should_run == 'true' && steps.classify.outputs.is_maintainer == 'true' && steps.classify.outputs.command_type != 'review'
        id: claude
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ github.token }}
          track_progress: false
          claude_args: >-
            --model claude-sonnet-4-5
            --max-turns 32
            --allowedTools "Read,Edit,Write,Bash(git status),Bash(git add:*),Bash(git commit:*),Bash(git push:*),Bash(git checkout:*),Bash(git switch:*),Bash(git diff:*),Bash(gh pr create:*),Bash(gh pr comment:*),Bash(gh pr view:*),Bash(npm run *),Bash(npm test),Bash(npm run test:*),Bash(npm run build),Bash(npm run lint:*),Bash(node *),Bash(npx *),Bash(rg *),Bash(fd *)"
            --output-format stream-json
          prompt: |
            You are Claude acting via GitHub Actions for the Attio MCP repo.

            ## Context
            You were triggered on issue #${{ steps.classify.outputs.issue }} with command: "${{ steps.context.outputs.comment_body }}"

            **Issue Title:** ${{ steps.context.outputs.issue_title }}

            **Issue Body:**
            ${{ steps.context.outputs.issue_body }}

            ## Your Task
            When the triggering comment is vague (like "@claude thoughts?"), your default behavior should be to:
            1. **Analyze the issue thoroughly** - Read the issue title, body, and any referenced code/files
            2. **Provide constructive feedback** on:
               - Missing information or unclear requirements
               - Suggested improvements to issue structure
               - Potential implementation approaches
               - Related code areas that might need changes
               - Acceptance criteria that should be added
               - Priority/complexity assessment
            3. **Ask clarifying questions** if the issue is ambiguous
            4. **Propose actionable next steps** for the maintainer

            When given a specific command (like "implement feature X" or "fix bug Y"):
            - Follow the maintainer's instruction precisely
            - Use repo standards (see CLAUDE.md)
            - Use conventional commit format: `Type: Subject #issue`
            - Run lint/tests when feasible
            - Keep commits small and focused

            ## Constraints
            - Work only within the repository checkout
            - Never expose secrets or tokens
            - Ask for clarification if needed
            - Respect Single Responsibility Principle

            ## Reply Format
            - Be direct and actionable
            - Include tests run (or skipped with rationale) if coding
            - If changes were pushed or a PR created, list the branch/PR URL

      - name: Capture Claude response
        if: always() && steps.claude.outcome != 'skipped' && steps.claude.outputs.execution_file != ''
        id: capture
        uses: actions/github-script@v7
        env:
          EXEC_FILE: ${{ steps.claude.outputs.execution_file }}
        with:
          script: |
            const fs = require('fs');
            const execFile = process.env.EXEC_FILE;

            if (!execFile || !fs.existsSync(execFile)) {
              core.info('No execution file found');
              return;
            }

            const raw = fs.readFileSync(execFile, 'utf8');
            const deltas = [];

            // Parse NDJSON stream
            for (const line of raw.split(/\r?\n/)) {
              const trimmed = line.trim();
              if (!trimmed) continue;
              try {
                const parsed = JSON.parse(trimmed);
                if (parsed?.delta?.text) {
                  deltas.push(parsed.delta.text);
                } else if (typeof parsed?.text === 'string') {
                  deltas.push(parsed.text);
                }
              } catch {}
            }

            const response = deltas.join('').trim();

            if (!response) {
              core.warning('No response content found');
              return;
            }

            core.exportVariable('CLAUDE_RESPONSE', response);
            core.info(`Captured response (${response.length} chars)`);

      - name: Post response to issue
        if: always() && steps.capture.outcome == 'success' && env.CLAUDE_RESPONSE != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = Number('${{ steps.classify.outputs.issue }}');
            const response = process.env.CLAUDE_RESPONSE;

            if (!issueNumber || !response) {
              core.info('No issue number or response to post');
              return;
            }

            const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

            async function withRetries(fn, label, attempts = 3) {
              for (let attempt = 1; attempt <= attempts; attempt++) {
                try {
                  return await fn();
                } catch (error) {
                  if (attempt === attempts) throw error;
                  const delay = 1000 * attempt;
                  core.warning(`Attempt ${attempt} failed. Retrying in ${delay}ms...`);
                  await sleep(delay);
                }
              }
            }

            const marker = `<!-- claude-command-response -->`;
            const body = `${marker}\n${response}`;

            // Post the comment with retries
            await withRetries(
              () => github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: body
              }),
              'create comment'
            );

            core.info(`Posted response to issue #${issueNumber}`);

      - name: Summarize skip
        if: steps.classify.outputs.should_run != 'true'
        run: echo 'Workflow exited without invoking Claude.'
