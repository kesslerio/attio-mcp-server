name: PR Issue Closure Validation

on:
  pull_request:
    types: [opened, synchronize, edited]
    # Only run when PR is marked as ready for review
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to validate for closure'
        required: true
        type: string

permissions:
  issues: read
  pull-requests: write
  contents: read

jobs:
  validate-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y \
          && sudo apt install -y jq

      - name: Extract issue number from PR
        id: extract-issue
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "issue_number=${{ github.event.inputs.issue_number }}" >> "$GITHUB_OUTPUT"
          else
            # SAFELY read PR title/body from event payload to avoid script injection
            # Ref: https://docs.github.com/en/actions/concepts/security/script-injections
            title=$(jq -r '.pull_request.title // ""' "$GITHUB_EVENT_PATH")
            body=$(jq -r '.pull_request.body // ""' "$GITHUB_EVENT_PATH")

            # Prefer explicit #123 reference first
            issue_num=$(printf '%s\n%s\n' "$title" "$body" | grep -oE '#[0-9]+' | head -1 | tr -d '#')

            # Fallback to "Closes|Fixes|Resolves #123" patterns
            if [ -z "$issue_num" ]; then
              issue_num=$(printf '%s\n' "$body" | grep -oE '(Closes|Fixes|Resolves) #[0-9]+' | head -1 | grep -oE '[0-9]+')
            fi

            if [ -z "$issue_num" ]; then
              echo "No issue reference found in PR title or body"
              exit 0
            fi
            echo "issue_number=$issue_num" >> "$GITHUB_OUTPUT"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate issue hygiene
        if: steps.extract-issue.outputs.issue_number != ''
        run: |
          chmod +x ./build/validate_workflow.py
          python3 ./build/validate_workflow.py --issue-close ${{ steps.extract-issue.outputs.issue_number }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summarize unchecked criteria
        if: always() && steps.extract-issue.outputs.issue_number != ''
        run: |
          body=$(gh issue view ${{ steps.extract-issue.outputs.issue_number }} -R ${{ github.repository }} --json body --jq '.body' || echo '')

          echo "## Unchecked criteria in Issue #${{ steps.extract-issue.outputs.issue_number }}" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          unchecked="$(printf "%s\n" "$body" | grep -E '^[[:space:]]*[*-] \[ \] ' || true)"
          count="$(printf "%s\n" "$unchecked" | grep -c '^[[:space:]]*[*-] \[ \] ' || true)"

          echo "**Count:** $count" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"

          if [ -n "$unchecked" ]; then
            printf "%s\n" "$unchecked" | sed -E 's/^[[:space:]]*[*-] \[ \] /- /' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No unchecked items found._" >> "$GITHUB_STEP_SUMMARY"
          fi

          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Required label categories" >> "$GITHUB_STEP_SUMMARY"

          labels_raw="$(gh issue view ${{ steps.extract-issue.outputs.issue_number }} -R ${{ github.repository }} --json labels --jq '.labels[].name' || true)"
          labels="$(printf "%s\n" "$labels_raw" | tr '[:upper:]' '[:lower:]')"

          has_prio="$(printf "%s\n" "$labels" | grep -E '^p[0-5]$' -m1 || true)"
          has_type="$(printf "%s\n" "$labels" | grep -E '^type:' -m1 || true)"
          has_status="$(printf "%s\n" "$labels" | grep -E '^status:' -m1 || true)"
          has_area="$(printf "%s\n" "$labels" | grep -E '^area:' -m1 || true)"

          echo "- Priority (P0‚ÄìP5): $([ -n \"$has_prio\" ] && echo ‚úÖ || echo ‚ùå)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Type (type:*): $([ -n \"$has_type\" ] && echo ‚úÖ || echo ‚ùå)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Status (status:*): $([ -n \"$has_status\" ] && echo ‚úÖ || echo ‚ùå)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Area (area:*): $([ -n \"$has_area\" ] && echo ‚úÖ || echo ‚ùå)" >> "$GITHUB_STEP_SUMMARY"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR if validation fails
        if: github.event_name == 'pull_request' && failure() && steps.extract-issue.outputs.issue_number != ''
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "## ‚ùå Issue Closure Validation Failed

          **Issue #${{ steps.extract-issue.outputs.issue_number }}** is not ready for closure.

          This PR appears to resolve the issue, but the issue doesn't meet closure requirements yet.

          **Common reasons for failure:**
          - Issue has unchecked checkboxes/tasks
          - Missing required labels (Priority, Type, Area, Status)
          - No implementation details comment  
          - Missing verification statement

          **Next steps:**
          1. Visit [Issue #${{ steps.extract-issue.outputs.issue_number }}](https://github.com/${{ github.repository }}/issues/${{ steps.extract-issue.outputs.issue_number }}) to review requirements
          2. Complete any missing checkboxes or add missing labels  
          3. Add implementation details if needed
          4. Re-run this check or push new commits to trigger re-validation

          **Debug locally:**
          \`./build/validate_workflow.py --issue-close ${{ steps.extract-issue.outputs.issue_number }}\`

          üí° **Note**: This check ensures issues are properly documented before closure. If the issue is not ready to be closed, you can ignore this check."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR if validation passes
        if: github.event_name == 'pull_request' && success() && steps.extract-issue.outputs.issue_number != ''
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "## ‚úÖ Issue Closure Validation Passed

          **Issue #${{ steps.extract-issue.outputs.issue_number }}** meets all closure requirements and is ready to be closed when this PR merges.

          ‚úÖ All checkboxes completed  
          ‚úÖ Required labels applied  
          ‚úÖ Implementation details documented  
          ‚úÖ Verification statement included"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
