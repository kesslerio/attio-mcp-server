name: Claude Comment Review (API-only, safe)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]

# Never checkout PR code in a comment-triggered job
concurrency:
  group: claude-comment-review-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}-${{ github.event.comment.id || github.event.review.id || github.run_id }}
  cancel-in-progress: false

jobs:
  review:
    # Only when someone actually tags @claude
    if: |
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body, '@claude')
      ) || (
        github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, '@claude')
      ) || (
        github.event_name == 'pull_request_review' &&
        github.event.review.body &&
        contains(github.event.review.body, '@claude')
      )
    runs-on: ubuntu-latest
    timeout-minutes: 20
    # Minimal permissions; safe for forks. This job does not checkout or execute repo code.
    permissions:
      contents: read
      pull-requests: write # to post PR comments
      issues: write # to post on PR issue thread
      actions: read
      checks: read

    steps:
      # No checkout of the PR head; we only look at API metadata/diffs.

      - name: Get PR info
        id: prinfo
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = (context.payload.pull_request?.number) || context.issue.number;
            if (!prNumber) { core.setFailed('No PR number found on this event.'); return; }
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
            });
            core.setOutput('number', pr.number);
            core.setOutput('author', pr.user?.login || '');
            core.setOutput('title', pr.title || '');
            core.setOutput('additions', pr.additions || 0);
            core.setOutput('deletions', pr.deletions || 0);
            core.setOutput('changed_files', pr.changed_files || 0);

      - name: Detect modes (ultra)
        id: detect
        run: |
          TEXT="$(jq -r '.comment.body // .review.body // ""' "$GITHUB_EVENT_PATH")"
          LCTEXT="$(printf '%s' "$TEXT" | tr '[:upper:]' '[:lower:]')"
          if echo "$LCTEXT" | grep -q -E '(^|\W)ultra(\W+review)?(\W|$)'; then
            echo "ultra=true" >> "$GITHUB_OUTPUT"
          else
            echo "ultra=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Cap turns for huge diffs (API-only)
        id: cap
        run: |
          CHANGED=${{ steps.prinfo.outputs.changed_files }}
          TURNS=${{ steps.detect.outputs.ultra == 'true' && '22' || '16' }}
          if [ "$CHANGED" -gt 60 ] && [ "$TURNS" -gt 18 ]; then
            TURNS=18
          fi
          echo "turns=$TURNS" >> "$GITHUB_OUTPUT"

      - name: Claude Review (API-only)
        id: claude
        uses: anthropics/claude-code-action@v1
        env:
          GH_TOKEN: ${{ github.token }} # API auth for PR metadata/status
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ github.token }}
          track_progress: true
          # No shell execution; safe tools only
          claude_args: >-
            --model ${{ steps.detect.outputs.ultra == 'true' && 'claude-opus-4-1-20250805' || 'claude-sonnet-4-20250514' }}
            --max-turns ${{ steps.cap.outputs.turns }}
            --allowed-tools Read,Glob,Grep
            --output-format stream-json
          prompt: |
            You are reviewing this PR WITHOUT checking out its code (untrusted context).
            Use GitHub API metadata and rendered diffs only. Do NOT execute any repo code.

            Enforce our standards:
            - SRP; size limits (fn ≤ 30–40; classes/files ≤ 500; ≤ 20–30 methods/class)
            - Refactor in small, tested steps; don't mix refactors with fixes; dedupe first
            - TS style: prefer Record<string, unknown>; PascalCase/camelCase; ordered imports; no unused
            - Commits: conventional or repo override; keep #issue linkage

            Output Markdown:
            - **Summary**
            - **Top Findings** (call out file paths/lines from diffs when possible)
            - **Suggested Tests**
            - **Quick Refactors**
            - **Risk Level** (and rationale)
            - If limited by API-only mode, state what deeper checks you'd do with a trusted checkout.

      # Fallback comment if the action didn't post (still safe; API-only)
      - name: Ensure review is posted (fallback)
        if: always()
        uses: actions/github-script@v7
        env:
          EXEC_FILE: ${{ steps.claude.outputs.execution_file }}
          RESULT: ${{ steps.claude.outputs.result }}
        with:
          script: |
            const fs = require('fs');
            const prNumber = Number('${{ steps.prinfo.outputs.number }}');
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 50
            });
            if (comments.some(c =>
              /Overall Risk:|Top Findings:|Suggested tests|Quick refactors/i.test(c.body || '') &&
              c.user?.type === 'Bot'
            )) {
              core.info('A Claude review comment already exists; skipping fallback.');
              return;
            }
            let body = (process.env.RESULT || '').trim();
            const p = process.env.EXEC_FILE;
            if (!body && p && fs.existsSync(p)) {
              try {
                const data = JSON.parse(fs.readFileSync(p, 'utf8'));
                if (typeof data.result === 'string' && data.result.trim()) body = data.result.trim();
              } catch { /* noop */ }
            }
            if (!body) body = '_Claude produced a review, but no formatted output was found. See logs._';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body
            });
            core.info('Posted fallback review comment.');
