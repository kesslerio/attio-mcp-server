{
  "name": "attio-mcp",
  "version": "0.2.0",
  "description": "A Model Context Protocol server that connects Attio to LLMs",
  "main": "dist/index.js",
  "module": "dist/index.js",
  "type": "module",
  "access": "public",
  "bin": {
    "attio-mcp": "dist/index.js",
    "attio-discover": "dist/cli/discover.js"
  },
  "scripts": {
    "clean": "shx rm -rf dist",
    "build": "tsc",
    "postbuild": "shx chmod +x dist/*.js",
    "check": "wireit",
    "build:watch": "tsc --watch",
    "lint:check": "wireit",
    "lint:fix": "wireit",
    "format": "npx prettier --write --config .prettierrc src/**/*.ts test/**/*.ts *.ts",
    "check:format": "npx prettier --check --config .prettierrc src/**/*.ts test/**/*.ts *.ts",
    "test": "vitest",
    "test:watch": "vitest --watch",
    "test:offline": "vitest --config vitest.config.offline.ts",
    "test:coverage": "vitest --coverage --run",
    "test:coverage:offline": "vitest --config vitest.config.offline.ts --coverage --run",
    "test:coverage:watch": "vitest --coverage --watch",
    "test:watch:offline": "vitest --config vitest.config.offline.ts --watch",
    "test:watch:ui": "vitest --ui",
    "test:watch:changed": "vitest --watch --changed",
    "test:single": "vitest --run",
    "test:debug": "vitest --reporter=verbose --no-coverage",
    "test:ci": "vitest --run --reporter=verbose",
    "test:integration": "vitest --config vitest.config.integration.ts --run",
    "test:integration:watch": "vitest --config vitest.config.integration.ts --watch",
    "test:integration:real-api": "vitest --config vitest.config.integration.ts --run test/integration/real-api-integration.test.ts",
    "test:unit": "vitest --run test/handlers/ test/objects/ test/utils/ test/validators/",
    "typecheck": "tsc --noEmit",
    "typecheck:watch": "tsc --noEmit --watch",
    "test:performance": "vitest --run test/performance/regression.test.ts",
    "perf:monitor": "node scripts/performance-monitor.js",
    "perf:report": "npm run test:performance -- --reporter=json > performance-results.json",
    "check:offline": "tsc --project tsconfig.offline.json --noEmit",
    "migrate-config": "node scripts/migrate-user-config.js",
    "codex:setup": "./scripts/codex-env-setup.sh",
    "codex:verify": "./scripts/verify-codex-env.sh",
    "test:people": "node test/objects/people.test.js",
    "test:search": "node test/api/search.test.js",
    "test:lists": "node test/objects/lists.test.js",
    "setup": "chmod +x scripts/setup-dev-env.sh && ./scripts/setup-dev-env.sh",
    "setup:minimal": "chmod +x scripts/setup-dev-env.sh && ./scripts/setup-dev-env.sh --skip-tdd --skip-ide --skip-hooks",
    "setup-hooks": "chmod +x build/install-hooks.sh && ./build/install-hooks.sh",
    "postinstall": "[ -d .git ] && npm run setup-hooks || echo 'Skipping git hooks setup (not a git repository)'",
    "test-hooks": "chmod +x build/test-hooks.sh && ./build/test-hooks.sh",
    "docker:build": "chmod +x scripts/docker-build.sh && ./scripts/docker-build.sh",
    "docker:run": "docker run -p 3000:3000 -e ATTIO_API_KEY=${ATTIO_API_KEY} -e ATTIO_WORKSPACE_ID=${ATTIO_WORKSPACE_ID} attio-mcp-server:latest",
    "docker:compose": "docker-compose up -d",
    "docker:logs": "docker-compose logs -f",
    "docker:stop": "docker-compose down",
    "discover": "node dist/cli/discover.js",
    "discover:attributes": "node dist/cli/discover.js attributes",
    "discover:all-attributes": "node dist/cli/discover.js attributes --all",
    "discover:high-memory": "NODE_OPTIONS='--max-old-space-size=4096' node -r dotenv/config dist/cli/discover.js",
    "discover:attributes:high-memory": "NODE_OPTIONS='--max-old-space-size=4096' node -r dotenv/config dist/cli/discover.js attributes",
    "discover:all-attributes:high-memory": "NODE_OPTIONS='--max-old-space-size=4096' node -r dotenv/config dist/cli/discover.js attributes --all",
    "discover:robust": "./scripts/run-discover.sh",
    "discover:attributes:robust": "./scripts/run-discover.sh attributes",
    "discover:all-attributes:robust": "./scripts/run-discover.sh attributes --all",
    "syncpack:check": "syncpack list-mismatches",
    "syncpack:fix": "syncpack fix-mismatches",
    "check:all": "npm run check && npm run build && npm run test:offline",
    "setup:dev": "npm install && npm run build",
    "setup:tdd": "./scripts/setup-tdd.sh",
    "create:test": "./scripts/create-test.sh",
    "verify:env": "node -e \"console.log('Node:', process.version); console.log('NPM:', process.env.npm_version || 'unknown')\"",
    "setup:test-data": "tsx scripts/setup-test-data.ts",
    "e2e:setup": "tsx test/e2e/setup.ts",
    "test:e2e": "node -r dotenv/config test/e2e/run-e2e-tests.js",
    "test:e2e:check": "node test/e2e/run-e2e-tests.js --check",
    "test:e2e:limited": "node test/e2e/run-e2e-tests.js --limited",
    "test:e2e:help": "node test/e2e/run-e2e-tests.js --help",
    "e2e": "vitest --config vitest.config.e2e.ts --run",
    "e2e:watch": "vitest --config vitest.config.e2e.ts",
    "e2e:universal": "vitest --config vitest.config.e2e.ts --run test/e2e/suites/universal-tools.e2e.test.ts",
    "e2e:lists": "vitest --config vitest.config.e2e.ts --run test/e2e/suites/lists-management.e2e.test.ts",
    "e2e:notes": "vitest --config vitest.config.e2e.ts --run test/e2e/suites/notes.e2e.test.ts",
    "e2e:tasks": "vitest --config vitest.config.e2e.ts --run test/e2e/suites/tasks.e2e.test.ts",
    "e2e:errors": "vitest --config vitest.config.e2e.ts --run test/e2e/suites/error-handling.e2e.test.ts",
    "e2e:cleanup": "tsx test/e2e/cleanup.ts",
    "e2e:cleanup:dry": "tsx test/e2e/cleanup.ts --dry-run",
    "e2e:cleanup:force": "tsx test/e2e/cleanup.ts --force",
    "e2e:debug": "DEBUG=* vitest --config vitest.config.e2e.ts --reporter=verbose",
    "e2e:coverage": "vitest --config vitest.config.e2e.ts --coverage --run",
    "e2e:validate": "tsx -e \"import('./test/e2e/utils/config-loader.js').then(m => m.loadE2EConfig()).then(() => console.log('✅ E2E configuration valid')).catch(e => { console.error('❌ E2E configuration invalid:', e); process.exit(1); })\"",
    "prepare": "husky"
  },
  "files": [
    "dist",
    "README.md",
    "LICENSE",
    "CHANGELOG.md"
  ],
  "keywords": [
    "mcp",
    "model-context-protocol",
    "attio",
    "crm",
    "claude",
    "ai",
    "automation",
    "typescript",
    "llm",
    "sales",
    "marketing"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/kesslerio/attio-mcp-server.git"
  },
  "bugs": {
    "url": "https://github.com/kesslerio/attio-mcp-server/issues"
  },
  "homepage": "https://github.com/kesslerio/attio-mcp-server#readme",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.4.1",
    "@types/handlebars": "^4.0.40",
    "chalk": "^5.3.0",
    "dotenv": "^17.2.1",
    "fast-safe-stringify": "^2.1.1",
    "handlebars": "^4.7.8",
    "ora": "^7.0.1",
    "safe-stable-stringify": "^2.5.0",
    "user": "^0.0.0",
    "yargs": "^18.0.0"
  },
  "author": "@kesslerio",
  "license": "Apache-2.0",
  "devDependencies": {
    "@types/express": "^5.0.2",
    "@types/jest": "^29.5.14",
    "@types/string-similarity": "^4.0.2",
    "@types/yargs": "^17.0.33",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@vitest/coverage-v8": "^3.2.4",
    "@vitest/ui": "^3.2.4",
    "axios": "^1.9.0",
    "dotenv-cli": "^10.0.0",
    "eslint": "^9.33.0",
    "husky": "^9.1.7",
    "jest": "^29.7.0",
    "prettier": "^3.6.2",
    "shx": "^0.4.0",
    "syncpack": "^13.0.4",
    "ts-jest": "^29.2.5",
    "tsx": "^4.19.2",
    "typescript": "^5.8.3",
    "vitest": "^3.2.4",
    "wireit": "^0.14.12"
  },
  "wireit": {
    "lint:check": {
      "command": "ESLINT_USE_FLAT_CONFIG=false npx eslint . --ext .ts --max-warnings 879",
      "files": [
        "src/**/*.ts",
        "test/**/*.ts",
        "*.ts",
        ".eslintrc.cjs",
        ".eslintignore",
        "tsconfig.json",
        ".prettierrc"
      ],
      "output": []
    },
    "lint:fix": {
      "command": "ESLINT_USE_FLAT_CONFIG=false npx eslint . --ext .ts --fix",
      "files": [
        "src/**/*.ts",
        "test/**/*.ts",
        "*.ts",
        ".eslintrc.cjs",
        ".eslintignore",
        "tsconfig.json",
        ".prettierrc"
      ],
      "output": []
    },
    "check": {
      "dependencies": [
        "syncpack:check",
        "check:format",
        "lint:check",
        "typecheck"
      ]
    }
  }
}
