#!/bin/bash
# prepare-commit-msg hook for use with pre-commit hook
# This script runs after the pre-commit hook and validates the commit message format

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2

# Skip if not a normal commit message (e.g. merge, squash, etc.)
if [ "$COMMIT_SOURCE" != "" ] && [ "$COMMIT_SOURCE" != "message" ]; then
  exit 0
fi

# Read the commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Validate that the commit follows the formatting requirements
# Format should be: "Type: Description" where Type is one of:
# Feature, Fix, Docs, Refactor, Test, Chore
if ! grep -q -E "^(Feature|Fix|Docs|Refactor|Test|Chore): " "$COMMIT_MSG_FILE"; then
  # Check if the message is empty after removing attribution
  if [[ -z "$COMMIT_MSG" || "$COMMIT_MSG" == "Please provide a meaningful commit message" ]]; then
    echo "Please provide a meaningful commit message" > "$COMMIT_MSG_FILE"
    echo -e "${YELLOW}Warning:${NC} Commit message should follow the format: 'Type: Description'"
    echo -e "Where Type is one of: Feature, Fix, Docs, Refactor, Test, Chore"
  fi
fi

exit 0