#!/bin/bash
# Pre-commit hook that enforces the CLAUDE.md validation pipeline
# RULE: All commits must pass validation per CLAUDE.md Git Commit Pipeline
# Enhanced with skip patterns and performance timing for Phase 3

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Performance timing
start_time=$(date +%s)

# Check for skip flags
SKIP_TESTS=false
SKIP_BUILD=false
EMERGENCY_MODE=false

# Parse command line arguments
for arg in "$@"; do
  case $arg in
    --skip-tests)
      SKIP_TESTS=true
      shift
      ;;
    --skip-build)
      SKIP_BUILD=true
      shift
      ;;
    --emergency)
      EMERGENCY_MODE=true
      SKIP_TESTS=true
      SKIP_BUILD=true
      shift
      ;;
  esac
done

# Check for environment variables
if [ "$SKIP_PRECOMMIT_TESTS" = "true" ]; then
  SKIP_TESTS=true
fi

if [ "$EMERGENCY_MODE" = "true" ]; then
  echo -e "${YELLOW}üö® EMERGENCY MODE: Skipping validation checks${NC}"
  echo -e "${YELLOW}‚ö†Ô∏è  Remember to run full validation later!${NC}"
  exit 0
fi

echo -e "${BLUE}üîç Pre-commit validation pipeline starting...${NC}"
echo -e "Enforcing CLAUDE.md Git Commit Pipeline [ENHANCED]"

# Stage 1: Lint Check
stage1_start=$(date +%s)
echo -e "\n${YELLOW}Stage 1/4: Running lint check...${NC}"
if ! npm run lint:check; then
  echo -e "${RED}‚ùå COMMIT BLOCKED: Lint check failed${NC}"
  echo -e "Fix lint issues before committing. Run: ${YELLOW}npm run lint:fix${NC}"
  echo -e "\nüí° Skip this check: ${YELLOW}SKIP_PRECOMMIT_TESTS=true git commit${NC}"
  exit 1
fi
stage1_end=$(date +%s)
echo -e "${GREEN}‚úÖ Lint check passed ($(($stage1_end - $stage1_start))s)${NC}"

# Stage 2: Format Check  
stage2_start=$(date +%s)
echo -e "\n${YELLOW}Stage 2/4: Running format check...${NC}"
if ! npm run check:format; then
  echo -e "${RED}‚ùå COMMIT BLOCKED: Format check failed${NC}"
  echo -e "Fix formatting issues before committing. Run: ${YELLOW}npm run format${NC}"
  exit 1
fi
stage2_end=$(date +%s)
echo -e "${GREEN}‚úÖ Format check passed ($(($stage2_end - $stage2_start))s)${NC}"

# Stage 3: Build Check
stage3_start=$(date +%s)
if [ "$SKIP_BUILD" = "true" ]; then
  echo -e "\n${YELLOW}Stage 3/4: Build check skipped${NC}"
else
  echo -e "\n${YELLOW}Stage 3/4: Running TypeScript build...${NC}"
  if ! npm run build; then
    echo -e "${RED}‚ùå COMMIT BLOCKED: Build failed${NC}"
    echo -e "Fix TypeScript compilation errors before committing."
    echo -e "\nüí° Skip this check: ${YELLOW}--skip-build${NC}"
    exit 1
  fi
  stage3_end=$(date +%s)
  echo -e "${GREEN}‚úÖ Build check passed ($(($stage3_end - $stage3_start))s)${NC}"
fi

# Stage 4: Unit Tests
stage4_start=$(date +%s)
if [ "$SKIP_TESTS" = "true" ]; then
  echo -e "\n${YELLOW}Stage 4/4: Tests skipped${NC}"
  echo -e "${YELLOW}‚ö†Ô∏è  Remember to run tests before pushing!${NC}"
else
  echo -e "\n${YELLOW}Stage 4/4: Running smoke tests...${NC}"
  # Try smoke tests first (if available), fall back to offline tests
  if npm run test:smoke >/dev/null 2>&1; then
    if ! NODE_ENV=test npm run test:smoke; then
      echo -e "${RED}‚ùå COMMIT BLOCKED: Smoke tests failed${NC}"
      echo -e "Fix failing tests before committing."
      echo -e "\nüí° Skip this check: ${YELLOW}SKIP_PRECOMMIT_TESTS=true git commit${NC}"
      echo -e "üí° Emergency commit: ${YELLOW}git commit --emergency${NC}"
      exit 1
    fi
  else
    # Fallback to offline tests
    echo -e "${YELLOW}Running offline tests (smoke tests not available)...${NC}"
    if ! NODE_ENV=test timeout 60 npm run test:offline; then
      echo -e "${RED}‚ùå COMMIT BLOCKED: Tests failed or timed out${NC}"
      echo -e "Fix failing tests before committing."
      echo -e "\nüí° Skip this check: ${YELLOW}SKIP_PRECOMMIT_TESTS=true git commit${NC}"
      echo -e "üí° Emergency commit: ${YELLOW}git commit --emergency${NC}"
      exit 1
    fi
  fi
  stage4_end=$(date +%s)
  echo -e "${GREEN}‚úÖ Tests passed ($(($stage4_end - $stage4_start))s)${NC}"
fi

# AI Attribution cleanup (secondary check)
echo -e "\n${YELLOW}Checking for AI attribution phrases...${NC}"
GIT_DIR=$(git rev-parse --git-dir)
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"

if [ -f "$COMMIT_MSG_FILE" ]; then
  # Define attribution phrases to remove
  ATTRIBUTION_PHRASES=(
    "ü§ñ Generated with Claude Code"
    "Generated with Claude Code" 
    "ü§ñ Generated with [Claude Code]"
    "Co-Authored-By: Claude <noreply@anthropic.com>"
    "Generated by Claude"
    "Generated by AI"
    "Generated with Claude"
    "Generated with AI"
    "Co-Authored-By: Assistant"
    "Created by AI"
    "Created with AI"
  )

  modified=false
  for phrase in "${ATTRIBUTION_PHRASES[@]}"; do
    if grep -F -q "$phrase" "$COMMIT_MSG_FILE"; then
      echo -e "${YELLOW}Removing attribution phrase: '$phrase'${NC}"
      sed -i.bak "s|$phrase||g" "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
      modified=true
    fi
  done

  if [ "$modified" = true ]; then
    # Clean up empty lines
    sed -i.bak '/^$/d' "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
    echo -e "${GREEN}‚úÖ Attribution cleanup completed${NC}"
  fi
fi

echo -e "\n${GREEN}üéâ All validation checks passed! Commit approved.${NC}"
echo -e "${BLUE}Pipeline: lint ‚úÖ format ‚úÖ build ‚úÖ tests ‚úÖ${NC}"
exit 0
