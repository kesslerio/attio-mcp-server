#!/bin/bash
# Enhanced pre-commit hook to check for specific AI attribution phrases in commit messages only

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the git directory
GIT_DIR=$(git rev-parse --git-dir)

# Configuration paths
SCRIPT_DIR="$(git rev-parse --show-toplevel)/build/hooks"
PATTERN_BUILDER="$SCRIPT_DIR/pattern_builder.sh"

echo "Pre-commit hook is running..."

# Function to get specific attribution phrases
get_attribution_phrases() {
  # Define specific phrases to look for
  cat << 'EOF'
ðŸ¤– Generated with Claude Code
ðŸ¤– Generated with [Claude Code](https://claude.ai/code)
Co-Authored-By: Claude <noreply@anthropic.com>
Generated by Claude
Generated by AI
Generated with Claude
Generated with AI
Co-Authored-By: Assistant
Created by AI
Created with AI
EOF
}

# Get the commit message
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
  commit_msg=$(cat "$COMMIT_MSG_FILE")
  modified=false
  
  # Get attribution phrases as an array
  mapfile -t ATTRIBUTION_PHRASES < <(get_attribution_phrases)
  
  # Check and clean commit message for each specific phrase
  for phrase in "${ATTRIBUTION_PHRASES[@]}"; do
    if [ -n "$phrase" ] && grep -q -F "$phrase" "$COMMIT_MSG_FILE"; then
      echo -e "${YELLOW}Warning:${NC} Commit message contains attribution phrase: '${YELLOW}$phrase${NC}'"
      echo -e "Removing attribution phrase..."
      
      # Remove the exact phrase (not using regex to avoid false positives)
      sed -i.bak "s|$phrase||g" "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
      modified=true
    fi
  done
  
  if [ "$modified" = true ]; then
    echo -e "${GREEN}âœ… Attribution phrases were removed from commit message.${NC}"
  fi
  
  # Remove any blank lines created by removing phrases
  sed -i.bak '/^$/d' "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
fi

echo -e "${GREEN}âœ… Pre-commit check completed.${NC}"
exit 0