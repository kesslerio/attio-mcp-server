#!/bin/bash
# Pre-commit hook that ONLY checks commit messages for specific attribution phrases
# Does NOT scan file contents - this is critical

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the git directory
GIT_DIR=$(git rev-parse --git-dir)

echo "Pre-commit hook is running..."

# Get the commit message file
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"

# Exit early if no commit message file exists
if [ ! -f "$COMMIT_MSG_FILE" ]; then
  echo -e "${GREEN}âœ… No commit message file found. Pre-commit check completed.${NC}"
  exit 0
fi

# Read the commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Define the standard attribution block that appears at the end of commit messages
STANDARD_BLOCK=$'ðŸ¤– Generated with [Claude Code](https://claude.ai/code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>'

# First check if the standard attribution block is present
if [[ "$COMMIT_MSG" == *"$STANDARD_BLOCK"* ]]; then
  echo -e "${YELLOW}Warning:${NC} Found standard attribution block in commit message"
  echo -e "Removing attribution block..."
  
  # Remove the standard block
  CLEANED_MSG="${COMMIT_MSG//$STANDARD_BLOCK/}"
  echo "$CLEANED_MSG" > "$COMMIT_MSG_FILE"
  modified=true
else
  # Define specific full phrases to look for if standard block not found
  ATTRIBUTION_PHRASES=(
    "ðŸ¤– Generated with Claude Code"
    "Generated with Claude Code"
    "ðŸ¤– Generated with [Claude Code]"
    "Co-Authored-By: Claude <noreply@anthropic.com>"
    "Generated by Claude"
    "Generated by AI"
    "Generated with Claude"
    "Generated with AI"
    "Co-Authored-By: Assistant"
    "Created by AI"
    "Created with AI"
  )

  # Flag to track if we modified the commit message
  modified=false

  # Check commit message for each specific phrase
  for phrase in "${ATTRIBUTION_PHRASES[@]}"; do
    # Use grep with -F for fixed string (exact match)
    if grep -F -q "$phrase" "$COMMIT_MSG_FILE"; then
      echo -e "${YELLOW}Warning:${NC} Commit message contains attribution phrase: '${YELLOW}$phrase${NC}'"
      echo -e "Removing attribution phrase..."
      
      # Remove the exact phrase with sed
      sed -i.bak "s|$phrase||g" "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
      modified=true
    fi
  done
fi

# Check if we modified the commit message
if [ "$modified" = true ]; then
  echo -e "${GREEN}âœ… Attribution phrases were removed from commit message.${NC}"
  
  # Clean up empty lines
  sed -i.bak '/^$/d' "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
fi

echo -e "${GREEN}âœ… Pre-commit check completed.${NC}"
exit 0