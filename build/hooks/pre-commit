#!/bin/bash
# Pre-commit hook that enforces the CLAUDE.md validation pipeline
# RULE: All commits must pass validation per CLAUDE.md Git Commit Pipeline

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîç Pre-commit validation pipeline starting...${NC}"
echo -e "Enforcing CLAUDE.md Git Commit Pipeline [ENFORCED]"

# Stage 1: Lint Check
echo -e "\n${YELLOW}Stage 1/4: Running lint check...${NC}"
if ! npm run lint:check; then
  echo -e "${RED}‚ùå COMMIT BLOCKED: Lint check failed${NC}"
  echo -e "Fix lint issues before committing. Run: ${YELLOW}npm run lint:fix${NC}"
  exit 1
fi
echo -e "${GREEN}‚úÖ Lint check passed${NC}"

# Stage 2: Format Check  
echo -e "\n${YELLOW}Stage 2/4: Running format check...${NC}"
if ! npm run check:format; then
  echo -e "${RED}‚ùå COMMIT BLOCKED: Format check failed${NC}"
  echo -e "Fix formatting issues before committing. Run: ${YELLOW}npm run format${NC}"
  exit 1
fi
echo -e "${GREEN}‚úÖ Format check passed${NC}"

# Stage 3: Build Check
echo -e "\n${YELLOW}Stage 3/4: Running TypeScript build...${NC}"
if ! npm run build; then
  echo -e "${RED}‚ùå COMMIT BLOCKED: Build failed${NC}"
  echo -e "Fix TypeScript compilation errors before committing."
  exit 1
fi
echo -e "${GREEN}‚úÖ Build check passed${NC}"

# Stage 4: Unit Tests
echo -e "\n${YELLOW}Stage 4/4: Running offline tests...${NC}"
if ! npm run test:offline; then
  echo -e "${RED}‚ùå COMMIT BLOCKED: Unit tests failed${NC}"
  echo -e "Fix failing tests before committing."
  exit 1
fi
echo -e "${GREEN}‚úÖ Unit tests passed${NC}"

# AI Attribution cleanup (secondary check)
echo -e "\n${YELLOW}Checking for AI attribution phrases...${NC}"
GIT_DIR=$(git rev-parse --git-dir)
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"

if [ -f "$COMMIT_MSG_FILE" ]; then
  # Define attribution phrases to remove
  ATTRIBUTION_PHRASES=(
    "ü§ñ Generated with Claude Code"
    "Generated with Claude Code" 
    "ü§ñ Generated with [Claude Code]"
    "Co-Authored-By: Claude <noreply@anthropic.com>"
    "Generated by Claude"
    "Generated by AI"
    "Generated with Claude"
    "Generated with AI"
    "Co-Authored-By: Assistant"
    "Created by AI"
    "Created with AI"
  )

  modified=false
  for phrase in "${ATTRIBUTION_PHRASES[@]}"; do
    if grep -F -q "$phrase" "$COMMIT_MSG_FILE"; then
      echo -e "${YELLOW}Removing attribution phrase: '$phrase'${NC}"
      sed -i.bak "s|$phrase||g" "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
      modified=true
    fi
  done

  if [ "$modified" = true ]; then
    # Clean up empty lines
    sed -i.bak '/^$/d' "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
    echo -e "${GREEN}‚úÖ Attribution cleanup completed${NC}"
  fi
fi

echo -e "\n${GREEN}üéâ All validation checks passed! Commit approved.${NC}"
echo -e "${BLUE}Pipeline: lint ‚úÖ format ‚úÖ build ‚úÖ tests ‚úÖ${NC}"
exit 0