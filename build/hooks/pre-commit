#!/bin/bash
# Enhanced pre-commit hook with file exemptions and dynamic pattern building

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the git directory and repository root
GIT_DIR=$(git rev-parse --git-dir)
REPO_ROOT=$(git rev-parse --show-toplevel)

# Configuration and helper script paths
SCRIPT_DIR="$REPO_ROOT/build/hooks"
EXEMPTIONS_CONFIG="$SCRIPT_DIR/config/exempted_files.conf"
PATTERN_BUILDER="$SCRIPT_DIR/pattern_builder.sh"

echo "Pre-commit hook is running..."

# Function to check if a file is exempted from checks
is_file_exempted() {
  local file_to_check="$1"
  local relative_path="${file_to_check#$REPO_ROOT/}"
  
  # Check if exemptions config exists
  if [ ! -f "$EXEMPTIONS_CONFIG" ]; then
    return 1 # Not exempted if config doesn't exist
  fi
  
  # Read exemption patterns from config
  while IFS= read -r line || [ -n "$line" ]; do
    # Skip comments and empty lines
    if [[ "$line" =~ ^#.*$ ]] || [[ -z "${line// }" ]]; then
      continue
    fi
    
    # Check if file matches exemption pattern
    if [[ "$relative_path" == $line ]] || [[ "$relative_path" == */$line ]]; then
      return 0 # File is exempted
    fi
  done < "$EXEMPTIONS_CONFIG"
  
  return 1 # Not exempted
}

# Function to get attribution patterns
get_attribution_patterns() {
  # Check if pattern builder exists
  if [ -f "$PATTERN_BUILDER" ] && [ -x "$PATTERN_BUILDER" ]; then
    # Execute pattern builder to generate patterns dynamically
    patterns=$("$PATTERN_BUILDER")
    echo "$patterns"
  else
    # Fallback to basic patterns if builder is unavailable
    echo "Generated with Generated by Co-Authored-By: noreply@anthropic.com AI-generated ðŸ¤– Generated Created with"
  fi
}

# Get the commit message
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
  commit_msg=$(cat "$COMMIT_MSG_FILE")
  modified=false
  
  # Get attribution patterns
  IFS=' ' read -r -a ATTRIBUTION_PATTERNS <<< "$(get_attribution_patterns)"
  
  # Check and clean commit message
  for pattern in "${ATTRIBUTION_PATTERNS[@]}"; do
    if [ -n "$pattern" ] && echo "$commit_msg" | grep -q "$pattern"; then
      echo -e "${YELLOW}Warning:${NC} Commit message contains attribution: '${YELLOW}$pattern${NC}'"
      echo -e "Removing attribution message..."
      
      # Actually remove the attribution lines from commit message
      sed -i.bak "/$pattern/d" "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
      modified=true
    fi
  done
  
  if [ "$modified" = true ]; then
    echo -e "${GREEN}âœ… Attribution messages were removed from commit message.${NC}"
  fi
fi

# Check staged files for attribution patterns
staged_files=$(git diff --cached --name-only)

# Get attribution patterns for file content checking
IFS=' ' read -r -a ATTRIBUTION_PATTERNS <<< "$(get_attribution_patterns)"

# Flag to track if we found any non-exempted attribution patterns
found_attribution=false

for file in $staged_files; do
  # Get full path to file
  full_path="$REPO_ROOT/$file"
  
  # Skip if file is exempted from checks
  if is_file_exempted "$full_path"; then
    echo -e "${GREEN}Skipping exempted file:${NC} $file"
    continue
  fi
  
  # Skip binary files and non-existent files
  if [ -f "$full_path" ] && file "$full_path" | grep -q "text"; then
    for pattern in "${ATTRIBUTION_PATTERNS[@]}"; do
      if [ -n "$pattern" ] && git diff --cached --unified=0 "$file" | grep -q "^\+.*$pattern"; then
        echo -e "${YELLOW}Warning:${NC} File '${YELLOW}$file${NC}' contains attribution: '${YELLOW}$pattern${NC}'"
        found_attribution=true
      fi
    done
  fi
done

# Only exit with error if non-exempted files contain attribution patterns
if [ "$found_attribution" = true ]; then
  echo -e "${RED}Error:${NC} Please remove attribution from your changes before committing."
  echo -e "Tip: If these files should be exempted, add them to ${EXEMPTIONS_CONFIG}"
  exit 1
fi

echo -e "${GREEN}âœ… Pre-commit checks completed.${NC}"
exit 0