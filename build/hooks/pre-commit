#!/bin/bash
# Pre-commit hook that ONLY checks commit messages for specific attribution phrases
# Does NOT scan file contents - this is critical

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get the git directory
GIT_DIR=$(git rev-parse --git-dir)

echo "Pre-commit hook is running..."

# Get the commit message file
COMMIT_MSG_FILE="$GIT_DIR/COMMIT_EDITMSG"

# Exit early if no commit message file exists
if [ ! -f "$COMMIT_MSG_FILE" ]; then
  echo -e "${GREEN}âœ… No commit message file found. Pre-commit check completed.${NC}"
  exit 0
fi

# Define specific full phrases to look for - these are the ONLY patterns we check
ATTRIBUTION_PHRASES=(
  "ðŸ¤– Generated with Claude Code"
  "ðŸ¤– Generated with [Claude Code](https://claude.ai/code)"
  "Co-Authored-By: Claude <noreply@anthropic.com>"
  "Generated by Claude"
  "Generated by AI"
  "Generated with Claude"
  "Generated with AI"
  "Co-Authored-By: Assistant"
  "Created by AI"
  "Created with AI"
)

# Flag to track if we modified the commit message
modified=false

# Check commit message for each specific phrase
for phrase in "${ATTRIBUTION_PHRASES[@]}"; do
  # Use grep with -F for fixed string (exact match) and -c to count occurrences
  if grep -F -q "$phrase" "$COMMIT_MSG_FILE"; then
    echo -e "${YELLOW}Warning:${NC} Commit message contains attribution phrase: '${YELLOW}$phrase${NC}'"
    echo -e "Removing attribution phrase..."
    
    # Remove the exact phrase with sed
    sed -i.bak "s|$phrase||g" "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
    modified=true
  fi
done

# Check if we modified the commit message
if [ "$modified" = true ]; then
  echo -e "${GREEN}âœ… Attribution phrases were removed from commit message.${NC}"
  
  # Clean up empty lines
  sed -i.bak '/^$/d' "$COMMIT_MSG_FILE" && rm -f "${COMMIT_MSG_FILE}.bak"
fi

echo -e "${GREEN}âœ… Pre-commit check completed.${NC}"
exit 0